generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./schema"
  modelCase     = "PascalCase"
  modelSuffix   = "Model"
  relationModel = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildStats {
  id                Int        @default(autoincrement())
  period            Period
  source            SourceType
  generatedImages   Int        @default(0)
  generatedEmbeds   Int        @default(0)
  generatedMessages Int        @default(0)
  membersEvent      Int        @default(0)
  guildId           String?
  createdAt         DateTime   @default(now())
  Guild             Guild?     @relation(fields: [guildId], references: [id])

  @@id([id, period, source, createdAt])
}

model Guild {
  id            String        @id
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  sources       Source[]      @relation("AllSources")
  activeSources Source[]      @relation("ActiveSources")
  guildStats    GuildStats[]
  betaGuild     betaGuild?
  premiumGuild  premiumGuild?
}

model Source {
  id                  Int         @id @unique @default(autoincrement()) /// @zod.optional()
  guildId             String
  type                SourceType
  channelId           String?
  content             String?
  createdAt           DateTime?   @default(now())
  updatedAt           DateTime?   @updatedAt
  activeCardId        Int?        @unique
  activeCardToEmbedId Int?        @unique
  embeds              Embed[]
  images              ImageCard[] @relation("SourceCard")
  activeCard          ImageCard?  @relation("SourceActiveCard", fields: [activeCardId], references: [id], onDelete: Cascade)
  activeCardToEmbed   Embed?      @relation("SourceActiveCardToEmbed", fields: [activeCardToEmbedId], references: [id], onDelete: Cascade)
  Guild               Guild?      @relation("AllSources", fields: [guildId], references: [id], map: "Source_AllSources_guildId_fkey",  onDelete: Cascade)
  ActiveGuild         Guild?      @relation("ActiveSources", fields: [guildId], references: [id], map: "Source_ActiveSources_guildId_fkey", onDelete: Cascade)
}

model Embed {
  /// @zod.optional()
  id               Int          @id @default(autoincrement())
  Source           Source?      @relation(fields: [Sourceid], references: [id], onDelete: Cascade) /// zod.optional()
  Sourceid         Int /// @zod.optional()
  title            String?      @db.VarChar(256)
  description      String?      @db.VarChar(4096)
  timestamp        DateTime?
  timestampNow     Boolean?
  thumbnail        String?
  url              String?
  created          DateTime?    @default(now())
  updated          DateTime?    @default(now())
  color            String?
  author           EmbedAuthor?
  fields           EmbedField[]
  footer           EmbedFooter?
  image            EmbedImage?
  SourceActiveCard Source?      @relation("SourceActiveCardToEmbed") /// @zod.optional()
}

model EmbedImage {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedAuthor {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  name      String
  iconUrl   String?
  url       String?   @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedField {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedFooter {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  text      String    @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model ImageCard {
  /// @zod.optional()
  id                Int            @id @default(autoincrement())
  /// @zod.optional()
  backgroundImgURL  String?
  /// @zod.optional()
  backgroundColor   String?
  /// @zod.optional()
  avatarBorderColor String?
  /// @zod.optional()
  colorTextDefault  String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?      @updatedAt
  mainText          ImageCardText? @relation("MainTextRelation", fields: [mainTextId], references: [id], onDelete: Cascade)
  secondText        ImageCardText? @relation("SecondTextRelation", fields: [secondTextId], references: [id], onDelete: Cascade)
  nicknameText      ImageCardText? @relation("NicknameRelation", fields: [nicknameTextId], references: [id], onDelete: Cascade)
  mainTextId        Int?           @unique
  secondTextId      Int?           @unique
  nicknameTextId    Int?           @unique
  Source            Source         @relation("SourceCard", fields: [sourceId], references: [id],  onDelete: Cascade)
  sourceId          Int
  SourceActive      Source?        @relation("SourceActiveCard")
}

model ImageCardText {
  id           Int        @id @default(autoincrement())
  content      String
  color        String?
  font         String?
  size         Int?
  weight       String?
  mainCard     ImageCard? @relation("MainTextRelation")
  nicknameCard ImageCard? @relation("NicknameRelation")
  secondCard   ImageCard? @relation("SecondTextRelation")
}

model Session {
  id          String    @id @default(cuid())
  accessToken String
  expiresAt   DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id],  onDelete: Cascade)
}

model User {
  id        String    @id
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  sessions  Session[]
  username  String?
  betaGuilds betaGuild[] 
}

model betaGuild {
  id        String    @id
  guild     Guild     @relation(fields: [id], references: [id], onDelete: Cascade)
  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model premiumGuild {
  id        String    @id
  guild     Guild     @relation(fields: [id], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum SourceType {
  Welcomer
  Leaver
  DM
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  TOTAL
}
