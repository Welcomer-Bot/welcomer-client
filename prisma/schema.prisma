generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./schema"
  modelSuffix   = "Model"
  relationModel = "true"
  modelCase     = "PascalCase"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id        String      @id @unique
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  leaver    Leaver?
  welcomer  Welcomer?
  stats     GuildStats[]
  premium   Boolean     @default(false)
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  TOTAL
}

enum Module {
  welcomer
  leaver
}

model GuildStats {
  guildId           String
  period            Period
  module            Module
  guild             Guild? @relation(fields: [guildId], references: [id])
  generatedImages   Int    @default(0)
  generatedEmbeds   Int    @default(0)
  generatedMessages Int    @default(0)
  membersEvent      Int    @default(0)

  @@id([guildId, period, module])
}

model Welcomer {
  /// @zod.optional()
  id                  Int         @id @default(autoincrement())
  guildId             String?     @unique
  channelId           String?
  content             String?
  createdAt           DateTime?   @default(now())
  updatedAt           DateTime?   @updatedAt
  DM                  DM?
  embeds              Embed[]
  images              ImageCard[] @relation(name: "WelcomerCard")
  activeCardId        Int?        @unique
  activeCardToEmbedId Int?        @unique
  activeCardToEmbed   Embed?      @relation(fields: [activeCardToEmbedId], references: [id], name: "WelcomerActiveCardToEmbed", onDelete: Cascade)
  activeCard          ImageCard?  @relation(fields: [activeCardId], references: [id], name: "WelcomerActiveCard", onDelete: Cascade)
  guild               Guild?      @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Leaver {
  /// @zod.optional()
  id                  Int         @id @default(autoincrement())
  guildId             String?     @unique
  channelId           String?
  content             String?
  createdAt           DateTime?   @default(now())
  updatedAt           DateTime?   @updatedAt
  embeds              Embed[]
  images              ImageCard[]
  activeCardToEmbedId Int?        @unique
  activeCardToEmbed   Embed?      @relation(fields: [activeCardToEmbedId], references: [id], name: "LeaverActiveCardToEmbed", onDelete: Cascade)
  activeCardId        Int?        @unique
  activeCard          ImageCard?  @relation(fields: [activeCardId], references: [id], name: "LeaverActiveCard", onDelete: Cascade)
  guild               Guild?      @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model DM {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  moduleId  Int       @unique
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  module    Welcomer  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  embeds    Embed[]
}

model Embed {
  /// @zod.optional()
  id                      Int          @id @default(autoincrement())
  title                   String?      @db.VarChar(256)
  description             String?      @db.VarChar(4096)
  timestamp               DateTime?
  timestampNow            Boolean?
  thumbnail               String?
  url                     String?
  created                 DateTime?    @default(now())
  updated                 DateTime?    @default(now())
  welcomerId              Int?
  leaverId                Int?
  DMId                    Int?         @unique
  color                   String?
  DM                      DM?          @relation(fields: [DMId], references: [id], onDelete: Cascade)
  leaver                  Leaver?      @relation(fields: [leaverId], references: [id], onDelete: Cascade)
  welcomer                Welcomer?    @relation(fields: [welcomerId], references: [id], onDelete: Cascade)
  author                  EmbedAuthor?
  fields                  EmbedField[]
  footer                  EmbedFooter?
  image                   EmbedImage?
  welcomerEmbedActiveCard Welcomer?    @relation(name: "WelcomerActiveCardToEmbed")
  leaverEmbedActiveCard   Leaver?      @relation(name: "LeaverActiveCardToEmbed")
}

model EmbedImage {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedAuthor {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  name      String
  iconUrl   String?
  url       String?   @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedField {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedFooter {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  text      String    @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model ImageCard {
  /// @zod.optional()
  id Int @id @default(autoincrement())

  backgroundImgURL   String? /// @zod.optional()
  backgroundColor    String? /// @zod.optional()
  avatarBorderColor  String? /// @zod.optional()
  colorTextDefault   String? /// @zod.optional()
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  welcomerId         Int?
  leaverId           Int?
  mainTextId         Int?           @unique
  secondTextId       Int?           @unique
  nicknameTextId     Int?           @unique
  leaver             Leaver?        @relation(fields: [leaverId], references: [id], onDelete: Cascade)
  welcomer           Welcomer?      @relation(name: "WelcomerCard", fields: [welcomerId], references: [id], onDelete: Cascade)
  mainText           ImageCardText? @relation("MainTextRelation", fields: [mainTextId], references: [id], onDelete: Cascade) /// @zod.optional()
  secondText         ImageCardText? @relation("SecondTextRelation", fields: [secondTextId], references: [id], onDelete: Cascade) /// @zod.optional()
  nicknameText       ImageCardText? @relation("NicknameRelation", fields: [nicknameTextId], references: [id], onDelete: Cascade) /// @zod.optional()
  welcomerActiveCard Welcomer?      @relation(name: "WelcomerActiveCard")
  leaverActiveCard   Leaver?        @relation(name: "LeaverActiveCard")
}

model ImageCardText {
  id           Int        @id @default(autoincrement())
  content      String
  color        String?
  font         String?
  size         Int?
  weight       String?
  mainCard     ImageCard? @relation("MainTextRelation")
  secondCard   ImageCard? @relation("SecondTextRelation")
  nicknameCard ImageCard? @relation("NicknameRelation")
}

model User {
  id            String      @id
  username      String?
  discriminator String?
  avatar        String?
  accessToken   String?
  refreshToken  String?
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  guilds        UserGuild[]
}

model UserGuild {
  id          String     @id
  name        String
  description String?
  icon        String?
  banner      String?
  permissions String?
  memberCount Int        @default(0)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  channels    Channels[]
  users       User[]
}

model Channels {
  id        String     @id
  type      String
  name      String
  guildId   String?
  channelId String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  guild     UserGuild? @relation(fields: [guildId], references: [id])
}
