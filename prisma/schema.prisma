generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

generator json {
  provider = "prisma-json-types-generator"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./schema"
  modelCase     = "PascalCase"
  modelSuffix   = "Model"
  relationModel = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildStats {
  id                Int        @default(autoincrement())
  period            Period
  source            SourceType
  generatedImages   Int        @default(0)
  generatedEmbeds   Int        @default(0)
  generatedMessages Int        @default(0)
  membersEvent      Int        @default(0)
  guildId           String?
  createdAt         DateTime   @default(now())
  Guild             Guild?     @relation(fields: [guildId], references: [id])

  @@id([id, period, source, createdAt])
}

model Guild {
  id            String        @id
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  sources       Source[]      @relation("AllSources")
  activeSources Source[]      @relation("ActiveSources")
  guildStats    GuildStats[]
  betaGuild     betaGuild?
  premiumGuild  premiumGuild?
}

model Source {
  id           Int         @id @unique @default(autoincrement()) /// @zod.optional()
  guildId      String
  type         SourceType
  channelId    String?
  /// [DiscordMessage]
  message      Json
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @updatedAt
  activeCardId Int?        @unique
  images       ImageCard[] @relation("SourceCard")
  activeCard   ImageCard?  @relation("SourceActiveCard", fields: [activeCardId], references: [id], onDelete: Cascade)
  Guild        Guild?      @relation("AllSources", fields: [guildId], references: [id], map: "Source_AllSources_guildId_fkey", onDelete: Cascade)
  deleteAfter  Int?        @default(0)
  ActiveGuild  Guild?      @relation("ActiveSources", fields: [guildId], references: [id], map: "Source_ActiveSources_guildId_fkey", onDelete: Cascade)
}

model ImageCard {
  /// @zod.optional()
  id           Int       @id @default(autoincrement())
  data         Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  Source       Source    @relation("SourceCard", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId     Int
  SourceActive Source?   @relation("SourceActiveCard")
}

model Session {
  id          String    @id @default(cuid())
  accessToken String
  expiresAt   DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String      @id
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
  sessions   Session[]
  username   String?
  betaGuilds betaGuild[]
}

model betaGuild {
  id        String    @id
  guild     Guild     @relation(fields: [id], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model premiumGuild {
  id        String    @id
  guild     Guild     @relation(fields: [id], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum SourceType {
  Welcomer
  Leaver
  DM
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  TOTAL
}
