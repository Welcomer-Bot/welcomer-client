generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

generator zod {
  provider              = "zod-prisma"
  output                = "./schema"
  modelSuffix           = "Model"
  relationModel         = "true"
  useDecimalJs          = "true"
  modelCase             = "PascalCase"
  prismaJsonNullability = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id        String    @id @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  leaver    Leaver?
  welcomer  Welcomer?
}

model Welcomer {
  /// @zod.optional()
  id            Int         @id @default(autoincrement())
  guildId       String      @unique
  channelId     String?
  content       String?
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  DM            DM?
  embeds        Embed[]
  guild         Guild?      @relation(fields: [guildId], references: [id])
  activeImageId Int?
  images        ImageCard[]
}

model Leaver {
  /// @zod.optional()
  id            Int         @id @default(autoincrement())
  guildId       String      @unique
  channelId     String?
  content       String?
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  embeds        Embed[]
  guild         Guild?      @relation(fields: [guildId], references: [id])
  activeImageId Int?
  images        ImageCard[] //zod.nullable()
}

model DM {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  moduleId  Int       @unique
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  module    Welcomer  @relation(fields: [moduleId], references: [id])
  embeds    Embed[]
}

model Embed {
  /// @zod.optional()
  id           Int          @id @default(autoincrement())
  title        String?      @db.VarChar(256)
  description  String?      @db.VarChar(4096)
  timestamp    DateTime?
  timestampNow Boolean?
  thumbnail    String?
  url          String?
  created      DateTime?    @default(now())
  updated      DateTime?    @default(now())
  welcomerId   Int?
  leaverId     Int?
  DMId         Int?
  color        String?
  DM           DM?          @relation(fields: [DMId], references: [id])
  leaver       Leaver?      @relation(fields: [leaverId], references: [id])
  welcomer     Welcomer?    @relation(fields: [welcomerId], references: [id])
  author       EmbedAuthor?
  fields       EmbedField[]
  footer       EmbedFooter?
  image        EmbedImage?
}

model EmbedImage {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedAuthor {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  name      String
  iconUrl   String?
  url       String?   @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedField {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedFooter {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  text      String    @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model ImageCard {
  /// @zod.optional()

  id                Int            @id @default(autoincrement())
  mainTextId        Int?           @unique
  secondTextId      Int?           @unique
  nicknameTextId    Int?           @unique
  mainText          ImageCardText? @relation("MainTextRelation", fields: [mainTextId], references: [id])
  secondText        ImageCardText? @relation("SecondTextRelation", fields: [secondTextId], references: [id])
  nicknameText      ImageCardText? @relation("NicknameRelation", fields: [nicknameTextId], references: [id])
  backgroundColor   String?
  backgroundUrl     String?
  avatarBorderColor String?
  textColor         String?
  createdAt         DateTime?      @default(now())
  updatedAt         DateTime?      @updatedAt
  welcomerId        Int?
  leaverId          Int?
  welcomer          Welcomer?      @relation(fields: [welcomerId], references: [id])
  leaver            Leaver?        @relation(fields: [leaverId], references: [id])
}

model ImageCardText {
  /// @zod.optional()
  id         Int        @id @default(autoincrement())
  content    String
  color      String?
  font       String?
  size       Int?
  weight     String?
  mainCard   ImageCard? @relation("MainTextRelation")
  secondCard ImageCard? @relation("SecondTextRelation")
  nickname   ImageCard? @relation("NicknameRelation")
}

model User {
  id            String      @id
  username      String?
  discriminator String?
  avatar        String?
  accessToken   String?
  refreshToken  String?
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  guilds        UserGuild[]
}

model UserGuild {
  id          String     @id
  name        String
  icon        String?
  banner      String?
  permissions String?
  userId      String?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  channels    Channels[]
  user        User?      @relation(fields: [userId], references: [id])
}

model Channels {
  id        String     @id
  type      String
  name      String
  guildId   String?
  channelId String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  guild     UserGuild? @relation(fields: [guildId], references: [id])
}
