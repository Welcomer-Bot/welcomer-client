// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id   String @unique @id 
  welcomer Welcomer?
  leaver   Leaver?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Welcomer {
  id   Int @unique @default(autoincrement())
  guildId String @unique
  guild    Guild @relation(fields: [guildId], references: [id])
  channelId String?
  message   String?
  embeds Embed[]
  DM DM?
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leaver {
  id   Int @unique @default(autoincrement())
  guildId String @unique
  guild    Guild @relation(fields: [guildId], references: [id])
  channelId String?
  message   String?
  embeds Embed[]
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DM {
  id   Int @unique @default(autoincrement())
  moduleId Int @unique
  module    Welcomer @relation(fields: [moduleId], references: [id])
  message   String?
  embeds Embed[]
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Embed {
  id        Int @id @default(autoincrement())
  title     String?
  description String?
  color     Int?
  timestamp String?
  footer EmbedFooter?
  fields EmbedField[]
  author EmbedAuthor?
  image EmbedImage?
  thumbnail EmbedThumbnail?
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  welcomerId Int @unique
  welcomer Welcomer @relation(fields: [welcomerId], references: [id])
  leaverId Int @unique
  leaver Leaver @relation(fields: [leaverId], references: [id])
  DMId Int @unique
  DM DM @relation(fields: [DMId], references: [id])
}

model EmbedThumbnail {
  id        Int @id @default(autoincrement())
  embedId Int @unique
  embed Embed @relation(fields: [embedId], references: [id])
  url       String
  width Int?
  heigth Int?
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmbedImage {
  id        Int @id @default(autoincrement())
  embedId Int @unique
  embed Embed @relation(fields: [embedId], references: [id])
  url       String
  width Int?
  heigth Int?
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmbedAuthor {
  id        Int @id @default(autoincrement())
  embedId Int @unique
  embed Embed @relation(fields: [embedId], references: [id])
  name      String
  iconUrl   String?
  url       String?
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmbedField {
  id        Int @id @default(autoincrement())
  embedId Int @unique
  embed Embed @relation(fields: [embedId], references: [id])
  name      String
  value     String
  inline    Boolean?
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmbedFooter {
  id        Int @id @default(autoincrement())
  embedId Int @unique
  embed Embed @relation(fields: [embedId], references: [id])
  text      String
  iconUrl   String
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model User {
  id        String   @id @default(cuid()) @map("_id")
  name      String?
  avatar    String?
  accessToken String?
  refreshToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  expiresAt DateTime
}