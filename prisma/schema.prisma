// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id   String @unique @id 
  welcomer Welcomer?
  leaver   Leaver?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Welcomer {
  id   String @unique
  guild    Guild @relation(fields: [id], references: [id])
  channelId String @default("")
  message   String @default("")
  embeds Embed[]
  DM DM?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  welcomerId Int?
}

model Leaver {
  id   String @unique
  guild    Guild @relation(fields: [id], references: [id])
  channelId String
  message   String
  embeds Embed[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leaverId Int?
}

model DM {
  id   String @unique
  guild    Welcomer @relation(fields: [id], references: [id])
  message   String
  embeds Embed[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Embed {
  id        Int @id @default(autoincrement())
  title     String
  description String
  color     String
  footer EmbedFooter? @relation(fields: [footerid], references: [id])
footerid Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  welcomerId String?
  welcomer   Welcomer? @relation(fields: [welcomerId], references: [id])
  leaverId String?
  leaver   Leaver? @relation(fields: [leaverId], references: [id])
  DMId String?
  DM   DM? @relation(fields: [DMId], references: [id])
}

model EmbedFooter {
  id        Int @id @default(autoincrement())
  text      String
  iconUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Embed Embed[]
  
}



model User {
  id        String   @id @default(cuid()) @map("_id")
  name      String?
  avatar    String?
  accessToken String?
  refreshToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  expiresAt DateTime
}